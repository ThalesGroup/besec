// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Question question
//
// swagger:model question
type Question struct {

	// A set of allowed answers.
	Answers []interface{} `json:"answers"`

	// A reference to be able to refer to the question.
	// Can be omitted if there is only one question in a task, in which case the question ID defaults to the task ID.
	// Must be unique within a practice.
	// Pattern: ^[a-z]+[a-zA-Z0-9]*$
	ID string `json:"id,omitempty"`

	// Whether to allow N/A as an answer.
	Na *bool `json:"na,omitempty"`

	// The question to ask
	// Required: true
	Text *string `json:"text"`
}

// Validate validates this question
func (m *Question) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateText(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Question) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", m.ID, `^[a-z]+[a-zA-Z0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Question) validateText(formats strfmt.Registry) error {

	if err := validate.Required("text", "body", m.Text); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this question based on context it is used
func (m *Question) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Question) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Question) UnmarshalBinary(b []byte) error {
	var res Question
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

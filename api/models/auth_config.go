// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthConfig Authentication configuration for the deployment
//
// swagger:model authConfig
type AuthConfig struct {

	// emulator Url
	EmulatorURL string `json:"emulatorUrl,omitempty"`

	// gcp auth domain
	// Required: true
	GcpAuthDomain *string `json:"gcpAuthDomain"`

	// gcp public Api key
	// Required: true
	GcpPublicAPIKey *string `json:"gcpPublicApiKey"`

	// providers
	// Required: true
	Providers AuthProviders `json:"providers"`
}

// Validate validates this auth config
func (m *AuthConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGcpAuthDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpPublicAPIKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthConfig) validateGcpAuthDomain(formats strfmt.Registry) error {

	if err := validate.Required("gcpAuthDomain", "body", m.GcpAuthDomain); err != nil {
		return err
	}

	return nil
}

func (m *AuthConfig) validateGcpPublicAPIKey(formats strfmt.Registry) error {

	if err := validate.Required("gcpPublicApiKey", "body", m.GcpPublicAPIKey); err != nil {
		return err
	}

	return nil
}

func (m *AuthConfig) validateProviders(formats strfmt.Registry) error {

	if err := validate.Required("providers", "body", m.Providers); err != nil {
		return err
	}

	if err := m.Providers.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("providers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("providers")
		}
		return err
	}

	return nil
}

// ContextValidate validate this auth config based on the context it is used
func (m *AuthConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProviders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthConfig) contextValidateProviders(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Providers.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("providers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("providers")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthConfig) UnmarshalBinary(b []byte) error {
	var res AuthConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Task A self-contained description of an activity that will improve product security.
//
// swagger:model task
type Task struct {

	// The full definition of what the task is. Try to include *why* this is a useful thing to do.
	// Required: true
	Description *string `json:"description"`

	// A reference for the task, unique within the practice, not visible to users. Use camelCase.
	// Required: true
	// Pattern: ^[a-z]+[a-zA-Z0-9]*$
	ID *string `json:"id"`

	// If a team is performing all of the tasks of a given level, their maturity rating for this practice is considered to be at that level.
	// Level 5 is reserved for teams going beyond the activities described in the practice.
	// If there are less than four levels, the order they should be introduced is: 4, 1, 2, 3.
	// Required: true
	// Maximum: 4
	// Minimum: 1
	Level *int64 `json:"level"`

	// Questions to determine whether or not the team already does this task.
	// If the team answer yes to all of these questions, then we assume this task is being performed.
	// Required: true
	// Min Items: 1
	Questions []*Question `json:"questions"`

	// A short summary of the task. Try and use the imperative tense.
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this task
func (m *Task) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuestions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Task) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *Task) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.Pattern("id", "body", *m.ID, `^[a-z]+[a-zA-Z0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Task) validateLevel(formats strfmt.Registry) error {

	if err := validate.Required("level", "body", m.Level); err != nil {
		return err
	}

	if err := validate.MinimumInt("level", "body", *m.Level, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("level", "body", *m.Level, 4, false); err != nil {
		return err
	}

	return nil
}

func (m *Task) validateQuestions(formats strfmt.Registry) error {

	if err := validate.Required("questions", "body", m.Questions); err != nil {
		return err
	}

	iQuestionsSize := int64(len(m.Questions))

	if err := validate.MinItems("questions", "body", iQuestionsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Questions); i++ {
		if swag.IsZero(m.Questions[i]) { // not required
			continue
		}

		if m.Questions[i] != nil {
			if err := m.Questions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("questions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("questions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Task) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this task based on the context it is used
func (m *Task) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQuestions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Task) contextValidateQuestions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Questions); i++ {

		if m.Questions[i] != nil {
			if err := m.Questions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("questions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("questions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Task) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Task) UnmarshalBinary(b []byte) error {
	var res Task
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

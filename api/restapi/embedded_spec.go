// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "BeSec",
    "version": "v1alpha1"
  },
  "basePath": "/v1alpha1",
  "paths": {
    "/auth": {
      "get": {
        "security": [],
        "operationId": "getAuthConfig",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/authConfig"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "description": "Used to trigger one-time events like requesting access. Clients should hit this once after obtaining an ID token, and can use or ignore the response.",
        "operationId": "loggedIn",
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "No access, access requested, invalid ID token, or internal error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/plan": {
      "post": {
        "operationId": "createPlan",
        "parameters": [
          {
            "$ref": "#/parameters/createRevision"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "required": [
                "planId",
                "revisionId"
              ],
              "properties": {
                "planId": {
                  "description": "The ID of the plan",
                  "type": "string"
                },
                "revisionId": {
                  "description": "The revision ID of the initial revision",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/plan/{id}": {
      "get": {
        "operationId": "getPlan",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "plan",
                "latestRevision"
              ],
              "properties": {
                "latestRevision": {
                  "description": "The ID of the latest revision of this plan",
                  "type": "string"
                },
                "plan": {
                  "$ref": "#/definitions/plan"
                }
              },
              "additionalProperties": false
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "operationId": "createPlanRevision",
        "parameters": [
          {
            "$ref": "#/parameters/createRevision"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "The ID of the new revision",
              "type": "string"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete this plan and all of the revisions associated with it",
        "operationId": "deletePlan",
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/plan/{id}/revision/{revId}": {
      "get": {
        "operationId": "getPlanRevision",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/planDetails"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "revId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/plan/{id}/revision/{revId}/responses": {
      "get": {
        "operationId": "getPlanRevisionPracticeResponses",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/practiceResponses"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "revId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/plan/{id}/versions": {
      "get": {
        "operationId": "getPlanVersions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "all of the versions for this plan, in order from oldest to latest",
              "type": "array",
              "items": {
                "$ref": "#/definitions/revisionVersion"
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/practices": {
      "get": {
        "operationId": "listPracticesVersions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "All of the versions, from oldest to newest",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/practices/{version}": {
      "get": {
        "operationId": "getPractices",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/gotPractices"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The version, or the special value \"latest\".",
          "name": "version",
          "in": "path",
          "required": true
        }
      ]
    },
    "/project": {
      "get": {
        "operationId": "listProjects",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/project"
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "operationId": "createProject",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/projectDetails"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "description": "The ID of the project",
              "type": "string"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/project/{id}": {
      "get": {
        "operationId": "getProject",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/project"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "operationId": "updateProject",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/projectDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteProject",
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "answer": {
      "type": "object",
      "required": [
        "answer"
      ],
      "properties": {
        "answer": {
          "type": "string",
          "enum": [
            "Yes",
            "No",
            "N/A",
            "Unanswered"
          ]
        },
        "notes": {
          "description": "Caveats; additions; or explanation of why - in particular why the answer is N/A.",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "x-go-type": {
        "import": {
          "package": "github.com/ThalesGroup/besec/lib"
        },
        "type": "Answer"
      }
    },
    "authConfig": {
      "description": "Authentication configuration for the deployment",
      "type": "object",
      "required": [
        "providers",
        "gcpPublicApiKey",
        "gcpAuthDomain"
      ],
      "properties": {
        "emulatorUrl": {
          "type": "string"
        },
        "gcpAuthDomain": {
          "type": "string"
        },
        "gcpPublicApiKey": {
          "type": "string"
        },
        "providers": {
          "$ref": "#/definitions/authProviders"
        }
      }
    },
    "authProvider": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "The Google Identity Platform provider ID",
          "type": "string",
          "example": "google.com"
        },
        "samlClaims": {
          "$ref": "#/definitions/samlProviderClaimsMap"
        },
        "signInOptions": {
          "$ref": "#/definitions/signInOptions"
        },
        "whitelisted": {
          "description": "True if every user from this provider has access",
          "type": "boolean"
        }
      }
    },
    "authProviders": {
      "description": "The authentication provider configuration, in the order they are shown",
      "type": "array",
      "items": {
        "$ref": "#/definitions/authProvider"
      }
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "gotPractices": {
      "type": "object",
      "required": [
        "version",
        "practices"
      ],
      "properties": {
        "practices": {
          "description": "The practices indexed by their ID",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/practice"
          }
        },
        "version": {
          "type": "string"
        }
      }
    },
    "plan": {
      "description": "The plan with the details from its latest revision",
      "type": "object",
      "required": [
        "id",
        "attributes"
      ],
      "properties": {
        "attributes": {
          "$ref": "#/definitions/planDetails"
        },
        "id": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "planDetails": {
      "description": "The high level part of a plan, excluding the individual answers",
      "type": "object",
      "required": [
        "date",
        "committed",
        "projects",
        "maturity"
      ],
      "properties": {
        "committed": {
          "description": "When a plan is (believed to be) finished it is committed",
          "type": "boolean",
          "default": false
        },
        "date": {
          "description": "The date this plan applies to (ISO short format)",
          "type": "string",
          "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
        },
        "maturity": {
          "description": "The calculated maturity level for each of the plan's practices",
          "type": "object",
          "additionalProperties": {
            "description": "The calculated maturity for a practice of this plan",
            "type": "integer"
          },
          "readOnly": true
        },
        "notes": {
          "description": "Optional notes about this plan, for example further clarification on the project/team context.",
          "type": "string"
        },
        "projects": {
          "description": "The IDs of the projects to which this plan applies",
          "type": "array",
          "items": {
            "type": "string",
            "minItems": 1
          }
        }
      },
      "x-go-type": {
        "import": {
          "package": "github.com/ThalesGroup/besec/lib"
        },
        "type": "PlanDetails"
      }
    },
    "practice": {
      "description": "The API representation of a practice, a specification of tasks to perform. Note this is not identical to the file representation of a practice - see schema.json for that.",
      "type": "object",
      "required": [
        "id",
        "name",
        "tasks"
      ],
      "properties": {
        "condition": {
          "description": "If a practice has qualifying questions, then it will also need a condition explaining how to interpret the answers to those questions.\nIf the practice always applies, then don't specify this.\nThe syntax is a boolean expression, formed of question ids, !, \u0026\u0026, || and (brackets).",
          "type": "string"
        },
        "id": {
          "description": "The internal practice name. Use camelCase.",
          "type": "string",
          "pattern": "^[a-z]+[a-zA-Z0-9]*$"
        },
        "level0": {
          "description": "A description of a project that doesn't meet level 1 of the practice",
          "type": "object",
          "required": [
            "short"
          ],
          "properties": {
            "long": {
              "description": "An optional fuller explanation",
              "type": "string"
            },
            "short": {
              "description": "short should be written so it can fill in the sentence \"This project \u003cshort\u003e.\"",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "name": {
          "description": "The user-facing name of this practice",
          "type": "string"
        },
        "notes": {
          "description": "Optional user-facing notes about this practice, for example to explain any terminology used in the questions.",
          "type": "string"
        },
        "page": {
          "description": "A page describing this practice in more detail, or providing additional guidance.",
          "type": "string",
          "format": "uri"
        },
        "questions": {
          "description": "A list of qualifying questions, that determine whether this practice applies at all to the project.",
          "type": "array",
          "minItems": 1,
          "items": {
            "description": "A qualifying question. You must specify an id for each question to be able to refer to it in the condition. If N/A is allowed as an answer, any answer of N/A will render a practice as not applicable, as the practice's condition become unevaluable.",
            "$ref": "#/definitions/question"
          }
        },
        "tasks": {
          "description": "The core of the practice - this is the list of things teams need to do.\nThe order matters - what is likely to be a more important task should come before a less important task.",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/task"
          }
        }
      },
      "additionalProperties": false,
      "x-go-type": {
        "$comment": "Used by go-swagger to direct code generation to extend the existing type",
        "import": {
          "package": "github.com/ThalesGroup/besec/lib"
        },
        "type": "Practice"
      }
    },
    "practiceResponse": {
      "type": "object",
      "required": [
        "tasks"
      ],
      "properties": {
        "practice": {
          "description": "Responses to the practice-level questions, keyed on question ID",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/answer"
          }
        },
        "tasks": {
          "description": "Responses to each task, keyed on task ID",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/taskResponse"
          }
        }
      },
      "additionalProperties": false,
      "x-go-type": {
        "import": {
          "package": "github.com/ThalesGroup/besec/lib"
        },
        "type": "PracticeResponse"
      }
    },
    "practiceResponses": {
      "type": "object",
      "required": [
        "practicesVersion",
        "practiceResponses"
      ],
      "properties": {
        "practiceResponses": {
          "description": "The responses to each of the practice questions, keyed on practice id",
          "type": "object",
          "additionalProperties": {
            "description": "A response to a practice's questions",
            "$ref": "#/definitions/practiceResponse"
          }
        },
        "practicesVersion": {
          "description": "The version of the practices used for this response",
          "type": "string"
        }
      },
      "x-go-type": {
        "import": {
          "package": "github.com/ThalesGroup/besec/lib"
        },
        "type": "PlanResponses"
      }
    },
    "project": {
      "description": "Projects are containers for plans",
      "type": "object",
      "required": [
        "id",
        "attributes",
        "plans"
      ],
      "properties": {
        "attributes": {
          "$ref": "#/definitions/projectDetails"
        },
        "id": {
          "type": "string",
          "readOnly": true
        },
        "plans": {
          "description": "The plan IDs associated with this project",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        }
      }
    },
    "projectDetails": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "description": "Further information about the project, for example what teams and products are considered in scope",
          "type": "string"
        },
        "name": {
          "description": "short name",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "question": {
      "type": "object",
      "required": [
        "text"
      ],
      "properties": {
        "answers": {
          "description": "A set of allowed answers.",
          "type": "array",
          "default": [
            "Yes",
            "No"
          ],
          "items": {
            "description": "An allowed answer"
          }
        },
        "id": {
          "description": "A reference to be able to refer to the question.\nCan be omitted if there is only one question in a task, in which case the question ID defaults to the task ID.\nMust be unique within a practice.",
          "type": "string",
          "pattern": "^[a-z]+[a-zA-Z0-9]*$"
        },
        "na": {
          "description": "Whether to allow N/A as an answer.",
          "type": "boolean",
          "default": true
        },
        "text": {
          "description": "The question to ask",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "revisionVersion": {
      "type": "object",
      "required": [
        "revId",
        "version"
      ],
      "properties": {
        "planId": {
          "description": "Plan this version is associated with",
          "type": "string"
        },
        "revId": {
          "description": "revision ID of this version",
          "type": "string"
        },
        "version": {
          "$ref": "#/definitions/version"
        }
      },
      "additionalProperties": false
    },
    "samlProviderClaimsMap": {
      "description": "A mapping from SAML claims to fields used within the app. Presence indicates this provider is a SAML provider.",
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "department": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "pictureURL": {
          "type": "string"
        },
        "surname": {
          "type": "string"
        }
      }
    },
    "signInOptions": {
      "description": "Firebase signin options, original type defined at firebaseui.auth.Config['signInOptions']",
      "type": "object",
      "properties": {
        "buttonColor": {
          "type": "string",
          "example": "#5DBFD4"
        },
        "iconUrl": {
          "type": "string"
        },
        "providerName": {
          "description": "User facing name for this option",
          "type": "string"
        }
      }
    },
    "task": {
      "description": "A self-contained description of an activity that will improve product security.",
      "type": "object",
      "required": [
        "id",
        "title",
        "description",
        "level",
        "questions"
      ],
      "properties": {
        "description": {
          "description": "The full definition of what the task is. Try to include *why* this is a useful thing to do.",
          "type": "string"
        },
        "id": {
          "description": "A reference for the task, unique within the practice, not visible to users. Use camelCase.",
          "type": "string",
          "pattern": "^[a-z]+[a-zA-Z0-9]*$"
        },
        "level": {
          "description": "If a team is performing all of the tasks of a given level, their maturity rating for this practice is considered to be at that level.\nLevel 5 is reserved for teams going beyond the activities described in the practice.\nIf there are less than four levels, the order they should be introduced is: 4, 1, 2, 3.",
          "type": "integer",
          "maximum": 4,
          "minimum": 1
        },
        "questions": {
          "description": "Questions to determine whether or not the team already does this task.\nIf the team answer yes to all of these questions, then we assume this task is being performed.",
          "type": "array",
          "minItems": 1,
          "items": {
            "description": "A Yes/No question to determine if the team is already doing this task.",
            "$ref": "#/definitions/question"
          }
        },
        "title": {
          "description": "A short summary of the task. Try and use the imperative tense.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "taskResponse": {
      "description": "The answers to a task's questions and additional data related to planning and execution.",
      "type": "object",
      "required": [
        "answers"
      ],
      "properties": {
        "answers": {
          "description": "Responses to the task questions, keyed on task ID",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/answer"
          }
        },
        "issues": {
          "type": "array",
          "items": {
            "description": "An issue URL that is being used to track and implement (a part of) this task",
            "type": "string"
          }
        },
        "priority": {
          "description": "Whether this task has been chosen as a priority to work on",
          "type": "boolean"
        },
        "references": {
          "description": "A description of how/where to find the current implementation of this task",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "x-go-type": {
        "import": {
          "package": "github.com/ThalesGroup/besec/lib"
        },
        "type": "TaskResponse"
      }
    },
    "version": {
      "type": "object",
      "required": [
        "time",
        "author"
      ],
      "properties": {
        "author": {
          "type": "object",
          "required": [
            "name",
            "uid"
          ],
          "properties": {
            "name": {
              "description": "The user's display name",
              "type": "string"
            },
            "pictureUrl": {
              "description": "A profile image",
              "type": "string"
            },
            "uid": {
              "description": "A site-wide unique ID",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "readOnly": true
        },
        "time": {
          "description": "The time this version was created",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "additionalProperties": false
    }
  },
  "parameters": {
    "createRevision": {
      "name": "body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "details",
          "responses"
        ],
        "properties": {
          "details": {
            "$ref": "#/definitions/planDetails"
          },
          "responses": {
            "$ref": "#/definitions/practiceResponses"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "key": []
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "BeSec",
    "version": "v1alpha1"
  },
  "basePath": "/v1alpha1",
  "paths": {
    "/auth": {
      "get": {
        "security": [],
        "operationId": "getAuthConfig",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/authConfig"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "description": "Used to trigger one-time events like requesting access. Clients should hit this once after obtaining an ID token, and can use or ignore the response.",
        "operationId": "loggedIn",
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "No access, access requested, invalid ID token, or internal error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/plan": {
      "post": {
        "operationId": "createPlan",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "details",
                "responses"
              ],
              "properties": {
                "details": {
                  "$ref": "#/definitions/planDetails"
                },
                "responses": {
                  "$ref": "#/definitions/practiceResponses"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "required": [
                "planId",
                "revisionId"
              ],
              "properties": {
                "planId": {
                  "description": "The ID of the plan",
                  "type": "string"
                },
                "revisionId": {
                  "description": "The revision ID of the initial revision",
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/plan/{id}": {
      "get": {
        "operationId": "getPlan",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "plan",
                "latestRevision"
              ],
              "properties": {
                "latestRevision": {
                  "description": "The ID of the latest revision of this plan",
                  "type": "string"
                },
                "plan": {
                  "$ref": "#/definitions/plan"
                }
              },
              "additionalProperties": false
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "operationId": "createPlanRevision",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "details",
                "responses"
              ],
              "properties": {
                "details": {
                  "$ref": "#/definitions/planDetails"
                },
                "responses": {
                  "$ref": "#/definitions/practiceResponses"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "The ID of the new revision",
              "type": "string"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete this plan and all of the revisions associated with it",
        "operationId": "deletePlan",
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/plan/{id}/revision/{revId}": {
      "get": {
        "operationId": "getPlanRevision",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/planDetails"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "revId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/plan/{id}/revision/{revId}/responses": {
      "get": {
        "operationId": "getPlanRevisionPracticeResponses",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/practiceResponses"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "revId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/plan/{id}/versions": {
      "get": {
        "operationId": "getPlanVersions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "all of the versions for this plan, in order from oldest to latest",
              "type": "array",
              "items": {
                "$ref": "#/definitions/revisionVersion"
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/practices": {
      "get": {
        "operationId": "listPracticesVersions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "All of the versions, from oldest to newest",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/practices/{version}": {
      "get": {
        "operationId": "getPractices",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/gotPractices"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The version, or the special value \"latest\".",
          "name": "version",
          "in": "path",
          "required": true
        }
      ]
    },
    "/project": {
      "get": {
        "operationId": "listProjects",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/project"
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "operationId": "createProject",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/projectDetails"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "description": "The ID of the project",
              "type": "string"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/project/{id}": {
      "get": {
        "operationId": "getProject",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/project"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "operationId": "updateProject",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/projectDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteProject",
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "PracticeLevel0": {
      "description": "A description of a project that doesn't meet level 1 of the practice",
      "type": "object",
      "required": [
        "short"
      ],
      "properties": {
        "long": {
          "description": "An optional fuller explanation",
          "type": "string"
        },
        "short": {
          "description": "short should be written so it can fill in the sentence \"This project \u003cshort\u003e.\"",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "VersionAuthor": {
      "type": "object",
      "required": [
        "name",
        "uid"
      ],
      "properties": {
        "name": {
          "description": "The user's display name",
          "type": "string"
        },
        "pictureUrl": {
          "description": "A profile image",
          "type": "string"
        },
        "uid": {
          "description": "A site-wide unique ID",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "readOnly": true
    },
    "answer": {
      "type": "object",
      "required": [
        "answer"
      ],
      "properties": {
        "answer": {
          "type": "string",
          "enum": [
            "Yes",
            "No",
            "N/A",
            "Unanswered"
          ]
        },
        "notes": {
          "description": "Caveats; additions; or explanation of why - in particular why the answer is N/A.",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "x-go-type": {
        "import": {
          "package": "github.com/ThalesGroup/besec/lib"
        },
        "type": "Answer"
      }
    },
    "authConfig": {
      "description": "Authentication configuration for the deployment",
      "type": "object",
      "required": [
        "providers",
        "gcpPublicApiKey",
        "gcpAuthDomain"
      ],
      "properties": {
        "emulatorUrl": {
          "type": "string"
        },
        "gcpAuthDomain": {
          "type": "string"
        },
        "gcpPublicApiKey": {
          "type": "string"
        },
        "providers": {
          "$ref": "#/definitions/authProviders"
        }
      }
    },
    "authProvider": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "The Google Identity Platform provider ID",
          "type": "string",
          "example": "google.com"
        },
        "samlClaims": {
          "$ref": "#/definitions/samlProviderClaimsMap"
        },
        "signInOptions": {
          "$ref": "#/definitions/signInOptions"
        },
        "whitelisted": {
          "description": "True if every user from this provider has access",
          "type": "boolean"
        }
      }
    },
    "authProviders": {
      "description": "The authentication provider configuration, in the order they are shown",
      "type": "array",
      "items": {
        "$ref": "#/definitions/authProvider"
      }
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "gotPractices": {
      "type": "object",
      "required": [
        "version",
        "practices"
      ],
      "properties": {
        "practices": {
          "description": "The practices indexed by their ID",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/practice"
          }
        },
        "version": {
          "type": "string"
        }
      }
    },
    "plan": {
      "description": "The plan with the details from its latest revision",
      "type": "object",
      "required": [
        "id",
        "attributes"
      ],
      "properties": {
        "attributes": {
          "$ref": "#/definitions/planDetails"
        },
        "id": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "planDetails": {
      "description": "The high level part of a plan, excluding the individual answers",
      "type": "object",
      "required": [
        "date",
        "committed",
        "projects",
        "maturity"
      ],
      "properties": {
        "committed": {
          "description": "When a plan is (believed to be) finished it is committed",
          "type": "boolean",
          "default": false
        },
        "date": {
          "description": "The date this plan applies to (ISO short format)",
          "type": "string",
          "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
        },
        "maturity": {
          "description": "The calculated maturity level for each of the plan's practices",
          "type": "object",
          "additionalProperties": {
            "description": "The calculated maturity for a practice of this plan",
            "type": "integer"
          },
          "readOnly": true
        },
        "notes": {
          "description": "Optional notes about this plan, for example further clarification on the project/team context.",
          "type": "string"
        },
        "projects": {
          "description": "The IDs of the projects to which this plan applies",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-type": {
        "import": {
          "package": "github.com/ThalesGroup/besec/lib"
        },
        "type": "PlanDetails"
      }
    },
    "practice": {
      "description": "The API representation of a practice, a specification of tasks to perform. Note this is not identical to the file representation of a practice - see schema.json for that.",
      "type": "object",
      "required": [
        "id",
        "name",
        "tasks"
      ],
      "properties": {
        "condition": {
          "description": "If a practice has qualifying questions, then it will also need a condition explaining how to interpret the answers to those questions.\nIf the practice always applies, then don't specify this.\nThe syntax is a boolean expression, formed of question ids, !, \u0026\u0026, || and (brackets).",
          "type": "string"
        },
        "id": {
          "description": "The internal practice name. Use camelCase.",
          "type": "string",
          "pattern": "^[a-z]+[a-zA-Z0-9]*$"
        },
        "level0": {
          "description": "A description of a project that doesn't meet level 1 of the practice",
          "type": "object",
          "required": [
            "short"
          ],
          "properties": {
            "long": {
              "description": "An optional fuller explanation",
              "type": "string"
            },
            "short": {
              "description": "short should be written so it can fill in the sentence \"This project \u003cshort\u003e.\"",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "name": {
          "description": "The user-facing name of this practice",
          "type": "string"
        },
        "notes": {
          "description": "Optional user-facing notes about this practice, for example to explain any terminology used in the questions.",
          "type": "string"
        },
        "page": {
          "description": "A page describing this practice in more detail, or providing additional guidance.",
          "type": "string",
          "format": "uri"
        },
        "questions": {
          "description": "A list of qualifying questions, that determine whether this practice applies at all to the project.",
          "type": "array",
          "minItems": 1,
          "items": {
            "description": "A qualifying question. You must specify an id for each question to be able to refer to it in the condition. If N/A is allowed as an answer, any answer of N/A will render a practice as not applicable, as the practice's condition become unevaluable.",
            "$ref": "#/definitions/question"
          }
        },
        "tasks": {
          "description": "The core of the practice - this is the list of things teams need to do.\nThe order matters - what is likely to be a more important task should come before a less important task.",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/task"
          }
        }
      },
      "additionalProperties": false,
      "x-go-type": {
        "$comment": "Used by go-swagger to direct code generation to extend the existing type",
        "import": {
          "package": "github.com/ThalesGroup/besec/lib"
        },
        "type": "Practice"
      }
    },
    "practiceResponse": {
      "type": "object",
      "required": [
        "tasks"
      ],
      "properties": {
        "practice": {
          "description": "Responses to the practice-level questions, keyed on question ID",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/answer"
          }
        },
        "tasks": {
          "description": "Responses to each task, keyed on task ID",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/taskResponse"
          }
        }
      },
      "additionalProperties": false,
      "x-go-type": {
        "import": {
          "package": "github.com/ThalesGroup/besec/lib"
        },
        "type": "PracticeResponse"
      }
    },
    "practiceResponses": {
      "type": "object",
      "required": [
        "practicesVersion",
        "practiceResponses"
      ],
      "properties": {
        "practiceResponses": {
          "description": "The responses to each of the practice questions, keyed on practice id",
          "type": "object",
          "additionalProperties": {
            "description": "A response to a practice's questions",
            "$ref": "#/definitions/practiceResponse"
          }
        },
        "practicesVersion": {
          "description": "The version of the practices used for this response",
          "type": "string"
        }
      },
      "x-go-type": {
        "import": {
          "package": "github.com/ThalesGroup/besec/lib"
        },
        "type": "PlanResponses"
      }
    },
    "project": {
      "description": "Projects are containers for plans",
      "type": "object",
      "required": [
        "id",
        "attributes",
        "plans"
      ],
      "properties": {
        "attributes": {
          "$ref": "#/definitions/projectDetails"
        },
        "id": {
          "type": "string",
          "readOnly": true
        },
        "plans": {
          "description": "The plan IDs associated with this project",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        }
      }
    },
    "projectDetails": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "description": "Further information about the project, for example what teams and products are considered in scope",
          "type": "string"
        },
        "name": {
          "description": "short name",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "question": {
      "type": "object",
      "required": [
        "text"
      ],
      "properties": {
        "answers": {
          "description": "A set of allowed answers.",
          "type": "array",
          "default": [
            "Yes",
            "No"
          ],
          "items": {
            "description": "An allowed answer"
          }
        },
        "id": {
          "description": "A reference to be able to refer to the question.\nCan be omitted if there is only one question in a task, in which case the question ID defaults to the task ID.\nMust be unique within a practice.",
          "type": "string",
          "pattern": "^[a-z]+[a-zA-Z0-9]*$"
        },
        "na": {
          "description": "Whether to allow N/A as an answer.",
          "type": "boolean",
          "default": true
        },
        "text": {
          "description": "The question to ask",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "revisionVersion": {
      "type": "object",
      "required": [
        "revId",
        "version"
      ],
      "properties": {
        "planId": {
          "description": "Plan this version is associated with",
          "type": "string"
        },
        "revId": {
          "description": "revision ID of this version",
          "type": "string"
        },
        "version": {
          "$ref": "#/definitions/version"
        }
      },
      "additionalProperties": false
    },
    "samlProviderClaimsMap": {
      "description": "A mapping from SAML claims to fields used within the app. Presence indicates this provider is a SAML provider.",
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "department": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "pictureURL": {
          "type": "string"
        },
        "surname": {
          "type": "string"
        }
      }
    },
    "signInOptions": {
      "description": "Firebase signin options, original type defined at firebaseui.auth.Config['signInOptions']",
      "type": "object",
      "properties": {
        "buttonColor": {
          "type": "string",
          "example": "#5DBFD4"
        },
        "iconUrl": {
          "type": "string"
        },
        "providerName": {
          "description": "User facing name for this option",
          "type": "string"
        }
      }
    },
    "task": {
      "description": "A self-contained description of an activity that will improve product security.",
      "type": "object",
      "required": [
        "id",
        "title",
        "description",
        "level",
        "questions"
      ],
      "properties": {
        "description": {
          "description": "The full definition of what the task is. Try to include *why* this is a useful thing to do.",
          "type": "string"
        },
        "id": {
          "description": "A reference for the task, unique within the practice, not visible to users. Use camelCase.",
          "type": "string",
          "pattern": "^[a-z]+[a-zA-Z0-9]*$"
        },
        "level": {
          "description": "If a team is performing all of the tasks of a given level, their maturity rating for this practice is considered to be at that level.\nLevel 5 is reserved for teams going beyond the activities described in the practice.\nIf there are less than four levels, the order they should be introduced is: 4, 1, 2, 3.",
          "type": "integer",
          "maximum": 4,
          "minimum": 1
        },
        "questions": {
          "description": "Questions to determine whether or not the team already does this task.\nIf the team answer yes to all of these questions, then we assume this task is being performed.",
          "type": "array",
          "minItems": 1,
          "items": {
            "description": "A Yes/No question to determine if the team is already doing this task.",
            "$ref": "#/definitions/question"
          }
        },
        "title": {
          "description": "A short summary of the task. Try and use the imperative tense.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "taskResponse": {
      "description": "The answers to a task's questions and additional data related to planning and execution.",
      "type": "object",
      "required": [
        "answers"
      ],
      "properties": {
        "answers": {
          "description": "Responses to the task questions, keyed on task ID",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/answer"
          }
        },
        "issues": {
          "type": "array",
          "items": {
            "description": "An issue URL that is being used to track and implement (a part of) this task",
            "type": "string"
          }
        },
        "priority": {
          "description": "Whether this task has been chosen as a priority to work on",
          "type": "boolean"
        },
        "references": {
          "description": "A description of how/where to find the current implementation of this task",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "x-go-type": {
        "import": {
          "package": "github.com/ThalesGroup/besec/lib"
        },
        "type": "TaskResponse"
      }
    },
    "version": {
      "type": "object",
      "required": [
        "time",
        "author"
      ],
      "properties": {
        "author": {
          "type": "object",
          "required": [
            "name",
            "uid"
          ],
          "properties": {
            "name": {
              "description": "The user's display name",
              "type": "string"
            },
            "pictureUrl": {
              "description": "A profile image",
              "type": "string"
            },
            "uid": {
              "description": "A site-wide unique ID",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "readOnly": true
        },
        "time": {
          "description": "The time this version was created",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "additionalProperties": false
    }
  },
  "parameters": {
    "createRevision": {
      "name": "body",
      "in": "body",
      "schema": {
        "type": "object",
        "required": [
          "details",
          "responses"
        ],
        "properties": {
          "details": {
            "$ref": "#/definitions/planDetails"
          },
          "responses": {
            "$ref": "#/definitions/practiceResponses"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "key": []
    }
  ]
}`))
}

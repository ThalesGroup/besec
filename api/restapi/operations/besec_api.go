// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ThalesGroup/besec/api/models"
)

// NewBesecAPI creates a new Besec instance
func NewBesecAPI(spec *loads.Document) *BesecAPI {
	return &BesecAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		CreatePlanHandler: CreatePlanHandlerFunc(func(params CreatePlanParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation CreatePlan has not yet been implemented")
		}),
		CreatePlanRevisionHandler: CreatePlanRevisionHandlerFunc(func(params CreatePlanRevisionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation CreatePlanRevision has not yet been implemented")
		}),
		CreateProjectHandler: CreateProjectHandlerFunc(func(params CreateProjectParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation CreateProject has not yet been implemented")
		}),
		DeletePlanHandler: DeletePlanHandlerFunc(func(params DeletePlanParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation DeletePlan has not yet been implemented")
		}),
		DeleteProjectHandler: DeleteProjectHandlerFunc(func(params DeleteProjectParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation DeleteProject has not yet been implemented")
		}),
		GetAuthConfigHandler: GetAuthConfigHandlerFunc(func(params GetAuthConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation GetAuthConfig has not yet been implemented")
		}),
		GetPlanHandler: GetPlanHandlerFunc(func(params GetPlanParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetPlan has not yet been implemented")
		}),
		GetPlanRevisionHandler: GetPlanRevisionHandlerFunc(func(params GetPlanRevisionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetPlanRevision has not yet been implemented")
		}),
		GetPlanRevisionPracticeResponsesHandler: GetPlanRevisionPracticeResponsesHandlerFunc(func(params GetPlanRevisionPracticeResponsesParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetPlanRevisionPracticeResponses has not yet been implemented")
		}),
		GetPlanVersionsHandler: GetPlanVersionsHandlerFunc(func(params GetPlanVersionsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetPlanVersions has not yet been implemented")
		}),
		GetPracticesHandler: GetPracticesHandlerFunc(func(params GetPracticesParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetPractices has not yet been implemented")
		}),
		GetProjectHandler: GetProjectHandlerFunc(func(params GetProjectParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetProject has not yet been implemented")
		}),
		ListPracticesVersionsHandler: ListPracticesVersionsHandlerFunc(func(params ListPracticesVersionsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation ListPracticesVersions has not yet been implemented")
		}),
		ListProjectsHandler: ListProjectsHandlerFunc(func(params ListProjectsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation ListProjects has not yet been implemented")
		}),
		LoggedInHandler: LoggedInHandlerFunc(func(params LoggedInParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation LoggedIn has not yet been implemented")
		}),
		UpdateProjectHandler: UpdateProjectHandlerFunc(func(params UpdateProjectParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation UpdateProject has not yet been implemented")
		}),

		// Applies when the "Authorization" header is set
		KeyAuth: func(token string) (*models.User, error) {
			return nil, errors.NotImplemented("api key auth (key) Authorization from header param [Authorization] has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*BesecAPI the besec API */
type BesecAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// KeyAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Authorization provided in the header
	KeyAuth func(string) (*models.User, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// CreatePlanHandler sets the operation handler for the create plan operation
	CreatePlanHandler CreatePlanHandler
	// CreatePlanRevisionHandler sets the operation handler for the create plan revision operation
	CreatePlanRevisionHandler CreatePlanRevisionHandler
	// CreateProjectHandler sets the operation handler for the create project operation
	CreateProjectHandler CreateProjectHandler
	// DeletePlanHandler sets the operation handler for the delete plan operation
	DeletePlanHandler DeletePlanHandler
	// DeleteProjectHandler sets the operation handler for the delete project operation
	DeleteProjectHandler DeleteProjectHandler
	// GetAuthConfigHandler sets the operation handler for the get auth config operation
	GetAuthConfigHandler GetAuthConfigHandler
	// GetPlanHandler sets the operation handler for the get plan operation
	GetPlanHandler GetPlanHandler
	// GetPlanRevisionHandler sets the operation handler for the get plan revision operation
	GetPlanRevisionHandler GetPlanRevisionHandler
	// GetPlanRevisionPracticeResponsesHandler sets the operation handler for the get plan revision practice responses operation
	GetPlanRevisionPracticeResponsesHandler GetPlanRevisionPracticeResponsesHandler
	// GetPlanVersionsHandler sets the operation handler for the get plan versions operation
	GetPlanVersionsHandler GetPlanVersionsHandler
	// GetPracticesHandler sets the operation handler for the get practices operation
	GetPracticesHandler GetPracticesHandler
	// GetProjectHandler sets the operation handler for the get project operation
	GetProjectHandler GetProjectHandler
	// ListPracticesVersionsHandler sets the operation handler for the list practices versions operation
	ListPracticesVersionsHandler ListPracticesVersionsHandler
	// ListProjectsHandler sets the operation handler for the list projects operation
	ListProjectsHandler ListProjectsHandler
	// LoggedInHandler sets the operation handler for the logged in operation
	LoggedInHandler LoggedInHandler
	// UpdateProjectHandler sets the operation handler for the update project operation
	UpdateProjectHandler UpdateProjectHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *BesecAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *BesecAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *BesecAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *BesecAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *BesecAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *BesecAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *BesecAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *BesecAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *BesecAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the BesecAPI
func (o *BesecAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.KeyAuth == nil {
		unregistered = append(unregistered, "AuthorizationAuth")
	}

	if o.CreatePlanHandler == nil {
		unregistered = append(unregistered, "CreatePlanHandler")
	}
	if o.CreatePlanRevisionHandler == nil {
		unregistered = append(unregistered, "CreatePlanRevisionHandler")
	}
	if o.CreateProjectHandler == nil {
		unregistered = append(unregistered, "CreateProjectHandler")
	}
	if o.DeletePlanHandler == nil {
		unregistered = append(unregistered, "DeletePlanHandler")
	}
	if o.DeleteProjectHandler == nil {
		unregistered = append(unregistered, "DeleteProjectHandler")
	}
	if o.GetAuthConfigHandler == nil {
		unregistered = append(unregistered, "GetAuthConfigHandler")
	}
	if o.GetPlanHandler == nil {
		unregistered = append(unregistered, "GetPlanHandler")
	}
	if o.GetPlanRevisionHandler == nil {
		unregistered = append(unregistered, "GetPlanRevisionHandler")
	}
	if o.GetPlanRevisionPracticeResponsesHandler == nil {
		unregistered = append(unregistered, "GetPlanRevisionPracticeResponsesHandler")
	}
	if o.GetPlanVersionsHandler == nil {
		unregistered = append(unregistered, "GetPlanVersionsHandler")
	}
	if o.GetPracticesHandler == nil {
		unregistered = append(unregistered, "GetPracticesHandler")
	}
	if o.GetProjectHandler == nil {
		unregistered = append(unregistered, "GetProjectHandler")
	}
	if o.ListPracticesVersionsHandler == nil {
		unregistered = append(unregistered, "ListPracticesVersionsHandler")
	}
	if o.ListProjectsHandler == nil {
		unregistered = append(unregistered, "ListProjectsHandler")
	}
	if o.LoggedInHandler == nil {
		unregistered = append(unregistered, "LoggedInHandler")
	}
	if o.UpdateProjectHandler == nil {
		unregistered = append(unregistered, "UpdateProjectHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *BesecAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *BesecAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "key":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.KeyAuth(token)
			})

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *BesecAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *BesecAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *BesecAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *BesecAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the besec API
func (o *BesecAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *BesecAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/plan"] = NewCreatePlan(o.context, o.CreatePlanHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/plan/{id}"] = NewCreatePlanRevision(o.context, o.CreatePlanRevisionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/project"] = NewCreateProject(o.context, o.CreateProjectHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/plan/{id}"] = NewDeletePlan(o.context, o.DeletePlanHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/project/{id}"] = NewDeleteProject(o.context, o.DeleteProjectHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth"] = NewGetAuthConfig(o.context, o.GetAuthConfigHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/plan/{id}"] = NewGetPlan(o.context, o.GetPlanHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/plan/{id}/revision/{revId}"] = NewGetPlanRevision(o.context, o.GetPlanRevisionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/plan/{id}/revision/{revId}/responses"] = NewGetPlanRevisionPracticeResponses(o.context, o.GetPlanRevisionPracticeResponsesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/plan/{id}/versions"] = NewGetPlanVersions(o.context, o.GetPlanVersionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/practices/{version}"] = NewGetPractices(o.context, o.GetPracticesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/project/{id}"] = NewGetProject(o.context, o.GetProjectHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/practices"] = NewListPracticesVersions(o.context, o.ListPracticesVersionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/project"] = NewListProjects(o.context, o.ListProjectsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth"] = NewLoggedIn(o.context, o.LoggedInHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/project/{id}"] = NewUpdateProject(o.context, o.UpdateProjectHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *BesecAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *BesecAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *BesecAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *BesecAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *BesecAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}

// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/ThalesGroup/besec/api/models"
)

// GetPlanHandlerFunc turns a function with the right signature into a get plan handler
type GetPlanHandlerFunc func(GetPlanParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPlanHandlerFunc) Handle(params GetPlanParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// GetPlanHandler interface for that can handle valid get plan params
type GetPlanHandler interface {
	Handle(GetPlanParams, *models.User) middleware.Responder
}

// NewGetPlan creates a new http.Handler for the get plan operation
func NewGetPlan(ctx *middleware.Context, handler GetPlanHandler) *GetPlan {
	return &GetPlan{Context: ctx, Handler: handler}
}

/* GetPlan swagger:route GET /plan/{id} getPlan

GetPlan get plan API

*/
type GetPlan struct {
	Context *middleware.Context
	Handler GetPlanHandler
}

func (o *GetPlan) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetPlanParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetPlanOKBody get plan o k body
//
// swagger:model GetPlanOKBody
type GetPlanOKBody struct {

	// The ID of the latest revision of this plan
	// Required: true
	LatestRevision *string `json:"latestRevision"`

	// plan
	// Required: true
	Plan *models.Plan `json:"plan"`
}

// Validate validates this get plan o k body
func (o *GetPlanOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLatestRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPlanOKBody) validateLatestRevision(formats strfmt.Registry) error {

	if err := validate.Required("getPlanOK"+"."+"latestRevision", "body", o.LatestRevision); err != nil {
		return err
	}

	return nil
}

func (o *GetPlanOKBody) validatePlan(formats strfmt.Registry) error {

	if err := validate.Required("getPlanOK"+"."+"plan", "body", o.Plan); err != nil {
		return err
	}

	if o.Plan != nil {
		if err := o.Plan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPlanOK" + "." + "plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPlanOK" + "." + "plan")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get plan o k body based on the context it is used
func (o *GetPlanOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPlanOKBody) contextValidatePlan(ctx context.Context, formats strfmt.Registry) error {

	if o.Plan != nil {
		if err := o.Plan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPlanOK" + "." + "plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPlanOK" + "." + "plan")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPlanOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPlanOKBody) UnmarshalBinary(b []byte) error {
	var res GetPlanOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

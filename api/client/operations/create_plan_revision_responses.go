// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/ThalesGroup/besec/api/models"
	"github.com/ThalesGroup/besec/lib"
)

// CreatePlanRevisionReader is a Reader for the CreatePlanRevision structure.
type CreatePlanRevisionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreatePlanRevisionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreatePlanRevisionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCreatePlanRevisionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreatePlanRevisionOK creates a CreatePlanRevisionOK with default headers values
func NewCreatePlanRevisionOK() *CreatePlanRevisionOK {
	return &CreatePlanRevisionOK{}
}

/* CreatePlanRevisionOK describes a response with status code 200, with default header values.

OK
*/
type CreatePlanRevisionOK struct {
	Payload string
}

func (o *CreatePlanRevisionOK) Error() string {
	return fmt.Sprintf("[POST /plan/{id}][%d] createPlanRevisionOK  %+v", 200, o.Payload)
}
func (o *CreatePlanRevisionOK) GetPayload() string {
	return o.Payload
}

func (o *CreatePlanRevisionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePlanRevisionDefault creates a CreatePlanRevisionDefault with default headers values
func NewCreatePlanRevisionDefault(code int) *CreatePlanRevisionDefault {
	return &CreatePlanRevisionDefault{
		_statusCode: code,
	}
}

/* CreatePlanRevisionDefault describes a response with status code -1, with default header values.

error
*/
type CreatePlanRevisionDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the create plan revision default response
func (o *CreatePlanRevisionDefault) Code() int {
	return o._statusCode
}

func (o *CreatePlanRevisionDefault) Error() string {
	return fmt.Sprintf("[POST /plan/{id}][%d] createPlanRevision default  %+v", o._statusCode, o.Payload)
}
func (o *CreatePlanRevisionDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreatePlanRevisionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreatePlanRevisionBody create plan revision body
swagger:model CreatePlanRevisionBody
*/
type CreatePlanRevisionBody struct {

	// details
	// Required: true
	Details *lib.PlanDetails `json:"details"`

	// responses
	// Required: true
	Responses *lib.PlanResponses `json:"responses"`
}

// Validate validates this create plan revision body
func (o *CreatePlanRevisionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResponses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePlanRevisionBody) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"details", "body", o.Details); err != nil {
		return err
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "details")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePlanRevisionBody) validateResponses(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"responses", "body", o.Responses); err != nil {
		return err
	}

	if o.Responses != nil {
		if err := o.Responses.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "responses")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "responses")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create plan revision body based on the context it is used
func (o *CreatePlanRevisionBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateResponses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePlanRevisionBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.Details != nil {
		if err := o.Details.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "details")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePlanRevisionBody) contextValidateResponses(ctx context.Context, formats strfmt.Registry) error {

	if o.Responses != nil {
		if err := o.Responses.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "responses")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "responses")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePlanRevisionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePlanRevisionBody) UnmarshalBinary(b []byte) error {
	var res CreatePlanRevisionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

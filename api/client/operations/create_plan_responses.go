// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/ThalesGroup/besec/api/models"
	"github.com/ThalesGroup/besec/lib"
)

// CreatePlanReader is a Reader for the CreatePlan structure.
type CreatePlanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreatePlanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreatePlanCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCreatePlanDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreatePlanCreated creates a CreatePlanCreated with default headers values
func NewCreatePlanCreated() *CreatePlanCreated {
	return &CreatePlanCreated{}
}

/* CreatePlanCreated describes a response with status code 201, with default header values.

Created
*/
type CreatePlanCreated struct {
	Payload *CreatePlanCreatedBody
}

func (o *CreatePlanCreated) Error() string {
	return fmt.Sprintf("[POST /plan][%d] createPlanCreated  %+v", 201, o.Payload)
}
func (o *CreatePlanCreated) GetPayload() *CreatePlanCreatedBody {
	return o.Payload
}

func (o *CreatePlanCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreatePlanCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePlanDefault creates a CreatePlanDefault with default headers values
func NewCreatePlanDefault(code int) *CreatePlanDefault {
	return &CreatePlanDefault{
		_statusCode: code,
	}
}

/* CreatePlanDefault describes a response with status code -1, with default header values.

error
*/
type CreatePlanDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the create plan default response
func (o *CreatePlanDefault) Code() int {
	return o._statusCode
}

func (o *CreatePlanDefault) Error() string {
	return fmt.Sprintf("[POST /plan][%d] createPlan default  %+v", o._statusCode, o.Payload)
}
func (o *CreatePlanDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreatePlanDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreatePlanBody create plan body
swagger:model CreatePlanBody
*/
type CreatePlanBody struct {

	// details
	// Required: true
	Details *lib.PlanDetails `json:"details"`

	// responses
	// Required: true
	Responses *lib.PlanResponses `json:"responses"`
}

// Validate validates this create plan body
func (o *CreatePlanBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResponses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePlanBody) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"details", "body", o.Details); err != nil {
		return err
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "details")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePlanBody) validateResponses(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"responses", "body", o.Responses); err != nil {
		return err
	}

	if o.Responses != nil {
		if err := o.Responses.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "responses")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "responses")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create plan body based on the context it is used
func (o *CreatePlanBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateResponses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePlanBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.Details != nil {
		if err := o.Details.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "details")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePlanBody) contextValidateResponses(ctx context.Context, formats strfmt.Registry) error {

	if o.Responses != nil {
		if err := o.Responses.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "responses")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "responses")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePlanBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePlanBody) UnmarshalBinary(b []byte) error {
	var res CreatePlanBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePlanCreatedBody create plan created body
swagger:model CreatePlanCreatedBody
*/
type CreatePlanCreatedBody struct {

	// The ID of the plan
	// Required: true
	PlanID *string `json:"planId"`

	// The revision ID of the initial revision
	// Required: true
	RevisionID *string `json:"revisionId"`
}

// Validate validates this create plan created body
func (o *CreatePlanCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePlanID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRevisionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePlanCreatedBody) validatePlanID(formats strfmt.Registry) error {

	if err := validate.Required("createPlanCreated"+"."+"planId", "body", o.PlanID); err != nil {
		return err
	}

	return nil
}

func (o *CreatePlanCreatedBody) validateRevisionID(formats strfmt.Registry) error {

	if err := validate.Required("createPlanCreated"+"."+"revisionId", "body", o.RevisionID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create plan created body based on context it is used
func (o *CreatePlanCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePlanCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePlanCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreatePlanCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

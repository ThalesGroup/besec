// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/ThalesGroup/besec/api/models"
)

// GetPlanReader is a Reader for the GetPlan structure.
type GetPlanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPlanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPlanOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetPlanDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetPlanOK creates a GetPlanOK with default headers values
func NewGetPlanOK() *GetPlanOK {
	return &GetPlanOK{}
}

/* GetPlanOK describes a response with status code 200, with default header values.

OK
*/
type GetPlanOK struct {
	Payload *GetPlanOKBody
}

func (o *GetPlanOK) Error() string {
	return fmt.Sprintf("[GET /plan/{id}][%d] getPlanOK  %+v", 200, o.Payload)
}
func (o *GetPlanOK) GetPayload() *GetPlanOKBody {
	return o.Payload
}

func (o *GetPlanOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPlanOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPlanDefault creates a GetPlanDefault with default headers values
func NewGetPlanDefault(code int) *GetPlanDefault {
	return &GetPlanDefault{
		_statusCode: code,
	}
}

/* GetPlanDefault describes a response with status code -1, with default header values.

error
*/
type GetPlanDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get plan default response
func (o *GetPlanDefault) Code() int {
	return o._statusCode
}

func (o *GetPlanDefault) Error() string {
	return fmt.Sprintf("[GET /plan/{id}][%d] getPlan default  %+v", o._statusCode, o.Payload)
}
func (o *GetPlanDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetPlanDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetPlanOKBody get plan o k body
swagger:model GetPlanOKBody
*/
type GetPlanOKBody struct {

	// The ID of the latest revision of this plan
	// Required: true
	LatestRevision *string `json:"latestRevision"`

	// plan
	// Required: true
	Plan *models.Plan `json:"plan"`
}

// Validate validates this get plan o k body
func (o *GetPlanOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLatestRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPlanOKBody) validateLatestRevision(formats strfmt.Registry) error {

	if err := validate.Required("getPlanOK"+"."+"latestRevision", "body", o.LatestRevision); err != nil {
		return err
	}

	return nil
}

func (o *GetPlanOKBody) validatePlan(formats strfmt.Registry) error {

	if err := validate.Required("getPlanOK"+"."+"plan", "body", o.Plan); err != nil {
		return err
	}

	if o.Plan != nil {
		if err := o.Plan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPlanOK" + "." + "plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPlanOK" + "." + "plan")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get plan o k body based on the context it is used
func (o *GetPlanOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPlanOKBody) contextValidatePlan(ctx context.Context, formats strfmt.Registry) error {

	if o.Plan != nil {
		if err := o.Plan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPlanOK" + "." + "plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPlanOK" + "." + "plan")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPlanOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPlanOKBody) UnmarshalBinary(b []byte) error {
	var res GetPlanOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

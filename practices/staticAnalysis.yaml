id: staticAnalysis
name: Static Analysis

notes: |
  Static analysis automates analysis of source code to detect potential errors, including potential vulnerabilities.

  3rd party code is out of scope of this practice.

level0:
  short:
    A project at level 0 on the maturity scale has a minimal or inconsistent amount of static analysis and issue triage
    performed, or does not analyze all code.
  long:
    Some code may undergo static analysis, and some effort may go into triaging and managing output, but these
    activities are not performed consistently or reliably.

taskDefinitions:
  useTools:
    title: Routinely use static analysis
    description: |
      Deploy capability to routinely use applicable static analysis tools.

      Perform static analysis on all of the code that makes up the project, using at least a subset of the recommended
      tools and their configuration - <placeholder for a link to your organization's guidance>.
    questions:
      - text:
          Are one or more static analysis tools routinely used to scan all of the code in the project, using at least a
          subset of the recommended configuration?
    level: 1

  triageNew:
    title: Triage all issues in new code
    description: |
      Triage and manage all identified issues in new code.

      New code is any code that has been created or included since the use of static analysis began.

      Triage and correction should be performed before the code undergoes manual review. This reduces the burden on code
      reviewers and also avoids a review cycle for any code updates that are required to address static analysis issues.

      When an issue is classified as a false positive, that classification should undergo peer review.
    questions:
      - id: triageNew
        text:
          Are all static analysis issues in code (other than legacy code) routinely identified and triaged prior to peer
          review?
      - id: reviewFalsePositives
        text: Do static analysis issues marked as false positive undergo peer review?
    level: 1

  allDevelopers:
    title: Enable static analysis use by all developers
    description: |
      Enable use of static analysis tools by all developers.

      This enables developers to get fast feedback on any issues, and fix issues that they introduced.  This is better
      for learning, effectiveness, and efficiency than having a separate individual or group working on static analysis
      output.

    questions:
      - text:
          Do all developers use the applicable static analysis tool(s), rather than limiting access and responsibility
          for performing static analysis and addressing issues to only a particular individual or group?
    level: 2

  newIssuesFixed:
    title: Fix all newly identified issues
    description: Fix all newly identified issues on a continuous basis. Part of considering any bit of work as complete
      should be that there are no outstanding static analysis issues.

      This approach enables developers to address quality and security issues that they've introduced with their code
      changes, immediately upon discovery.  Fixing issues immediately improves the overall effectiveness of the usage of
      static analysis, in that the developer responsible for introducing issues is also responsible for fixing them; and
      that a backlog of quality and security errors or issues is not being generated.
    questions:
      - text:
          Is there a triage process in place that requires all new issues raised by the tool to be fixed prior to
          release?
    level: 2

  useRecommendedConfig:
    title: Use recommended static analysis tool configuration
    description:
      Use of static analysis includes full use of the appropriate recommended tools and their configuration <placeholder
      for link to your organization's guidance>.
    questions:
      - text:
          Is the recommended configuration (e.g. enabled checks or aggressiveness level) used for the applicable
          tool(s)?
    level: 3

  triageLegacy:
    title: Triage all static analysis issues found in legacy code
    description: |
      Perform static analysis on legacy code, and triage and manage all issues.
      Legacy code is any code that exists in a released project before the routine use of static analysis began.

      Establish a fixed baseline of existing issues in the codebase, and triage them to identify false positives, urgent issues
      and less urgent issues. Fix the urgent issues promptly and manage the priority of fixing the remainder as per other technical-debt issues.

      A baseline of accepted 'false positives' and/or low risk items should be maintained for the codebase (assuming these items exist).
      This baseline is normally maintained by the tool or embedded in the code as comments. This allows pipelines to pass despite
      the presence of un-addressed issues in the codebase.
    questions:
      - text: Have all static analysis issues in legacy code been identified and triaged?
    level: 3

  trackMetrics:
    title: Track metrics related to static analysis
    description: |
      Tracking metrics related to static analysis usage, issues discovered, unfixed issues, code coverage, etc., and
      having those metrics reported in a generally available dashboard, provides valuable information that can be used
      to influence work planning, quality and security evaluations, and risk analysis.

      When legacy issues exist, reporting accurate metrics will help evaluation of technical and security debt, rate of
      burndown, and prioritization of clean up activities.
    questions:
      - text: Are metrics related to static analysis captured in some form of reporting dashboard and routinely updated?
    level: 3

  testingIntegration:
    title: Integrate static analysis with automated testing
    description: |
      Integrate static analysis scanning with the continuous integration and build process so that the build
      fails if there are any untriaged or triaged-and-unresolved issues.

      This also enables automatic capture and updates of statistics related to static analysis usage, including issues
      fixed, volume of legacy issues, code coverage, etc.

      Fixing issues introduced by changes and detected by static analysis when they happen and before they are
      integrated into the main code line has a number of benefits. It promotes developers taking responsibility for the
      quality of their own code; helps ensure that quality and security standards are being met for all code changes
      being made; and aids in learning. It also prevents build up of additional security and technical debt, and the
      introduction of vulnerabilities into "finished" code.

    questions:
      - text:
          Have the static analysis tools been integrated with automated testing/continuous integration and reporting?
    level: 3

  useUpdatedTool:
    title: Use updated static analysis tool version
    description:
      Use the most recent version of the applicable tool(s). This helps ensure the best possible coverage and results.
    questions:
      - text: Are the most recent version(s) of the applicable tool(s) being used?
    level: 4

  documentedProcess:
    title: Document static analysis process
    description: |
      Capture how static analysis is applied on the project, in particular what tools are used, how the tools are
      configured, and any rationales for relevant decisions made.

      This may include updating the definition of done, or updating a team or product way of working, and could include details such as:

        - a record of the tool(s) used;
        - where the tool(s) configuration can be found;
        - the frequency of execution;
        - how legacy issues are handled;
        - why particular rules have been disabled.
    questions:
      - text: Have you captured how static analysis is applied on the project?
    level: 4

  auditProcess:
    title: Audit application of static analysis process
    description: Routinely audit the application of the static analysis process to verify execution meets expectations.
    questions:
      - text:
          Does the project development team routinely audit its application of static analysis to ensure it meets
          expectations of reported maturity level?
    level: 4

  legacyAddressed:
    title: Address all issues identified in code - including legacy code
    description:
      All issues in the project code (other than those issues triaged as false positives), including issues found in
      legacy code, have been addressed.
    questions:
      - text: Have all issues identified by static analysis, including issues identified in legacy code, been addressed?
    level: 4

tasks:
  - useTools
  - triageNew
  - allDevelopers
  - newIssuesFixed
  - useRecommendedConfig
  - triageLegacy
  - trackMetrics
  - testingIntegration
  - useUpdatedTool
  - documentedProcess
  - auditProcess
  - legacyAddressed
